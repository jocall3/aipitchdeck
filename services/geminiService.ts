
import { GoogleGenAI, GenerateContentResponse, Part } from "@google/genai";
import { PitchDeckFormData, Slide, AutogeneratedBusinessIdea } from '../types';
import { GEMINI_MODEL_NAME, IMAGEN_MODEL_NAME, PITCH_DECK_SYSTEM_INSTRUCTION, AUTOGENERATE_BUSINESS_SYSTEM_INSTRUCTION } from '../constants';

if (!process.env.API_KEY) {
  console.error("API_KEY environment variable is not set. Please ensure it's available.");
}

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY! });

const constructPromptFromData = (formData: PitchDeckFormData): Part[] => {
  let promptText = `Generate a pitch deck based on the following information:\n\n`;
  promptText += `Company Name: ${formData.companyName || 'Not provided'}\n`;
  promptText += `Tagline: ${formData.tagline || 'Not provided'}\n`;
  promptText += `Problem: ${formData.problem || 'Not provided'}\n`;
  promptText += `Solution: ${formData.solution || 'Not provided'}\n`;
  promptText += `Target Market: ${formData.targetMarket || 'Not provided'}\n`;
  promptText += `Business Model: ${formData.businessModel || 'Not provided'}\n`;
  promptText += `Team Overview: ${formData.team || 'Not provided'}\n`;
  promptText += `Traction/Milestones: ${formData.traction || 'Not provided'}\n`;
  promptText += `Financial Projections/Highlights: ${formData.financialProjections || 'Not provided'}\n`;
  promptText += `Call To Action: ${formData.callToAction || 'Not provided'}\n\n`;

  if (formData.uploadedFiles && formData.uploadedFiles.length > 0) {
    promptText += `Additional information from uploaded files:\n`;
    formData.uploadedFiles.forEach(file => {
      promptText += `--- File: ${file.name} (${file.type}) ---\n`;
      promptText += `${file.content}\n`;
      promptText += `--- End of File: ${file.name} ---\n\n`;
    });
  }
  return [{ text: promptText }];
};

export const generatePitchDeckContent = async (formData: PitchDeckFormData): Promise<Slide[]> => {
  if (!process.env.API_KEY) {
    throw new Error("API Key for Gemini is not configured. Please set the API_KEY environment variable.");
  }
  
  const userQueryParts = constructPromptFromData(formData);

  try {
    // 1. Generate text content for all slides
    const textResponse: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_NAME,
      contents: { role: "user", parts: userQueryParts },
      config: {
        systemInstruction: PITCH_DECK_SYSTEM_INSTRUCTION,
        responseMimeType: "application/json",
      },
    });

    let jsonStr = textResponse.text.trim();
    const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s;
    let match = jsonStr.match(fenceRegex);
    if (match && match[2]) {
      jsonStr = match[2].trim();
    }

    let slides: Slide[];
    try {
      const parsedData = JSON.parse(jsonStr);
      if (Array.isArray(parsedData) && parsedData.every(item => 'title' in item && 'content' in item && 'speakerNotes' in item)) {
        slides = parsedData as Slide[];
      } else {
        console.error("Parsed JSON for slides does not match expected Slide[] structure:", parsedData);
        throw new Error("AI response for slide text was not in the expected format. The JSON structure is incorrect.");
      }
    } catch (e) {
      console.error("Failed to parse JSON response for slides from AI:", e);
      console.error("Raw AI response text for slides:", textResponse.text);
      throw new Error(`Failed to parse AI's JSON response for slides. Raw text: ${textResponse.text.substring(0,500)}...`);
    }

    // 2. Generate an image for each slide
    for (let i = 0; i < slides.length; i++) {
      try {
        const slide = slides[i];
        // Create a concise prompt for image generation
        let imagePrompt = `Visually represent: "${slide.title}". `;
        if (slide.content && slide.content.length > 0) {
          imagePrompt += `Key idea: "${slide.content[0]}". `;
        }
        imagePrompt += `Professional, modern, relevant to a business pitch deck.`;
        
        const imageResponse = await ai.models.generateImages({
            model: IMAGEN_MODEL_NAME,
            prompt: imagePrompt,
            config: { numberOfImages: 1, outputMimeType: 'image/jpeg' },
        });

        if (imageResponse.generatedImages && imageResponse.generatedImages.length > 0) {
          const base64ImageBytes: string = imageResponse.generatedImages[0].image.imageBytes;
          slide.imageUrl = `data:image/jpeg;base64,${base64ImageBytes}`;
        }
      } catch (imgError) {
        console.error(`Failed to generate image for slide "${slides[i].title}":`, imgError);
        // Continue without an image for this slide
      }
    }
    return slides;

  } catch (error) {
    console.error("Error in generatePitchDeckContent:", error);
    if (error instanceof Error) {
      if (error.message.includes("API key not valid")) {
        throw new Error("Invalid API Key. Please check your Gemini API key configuration.");
      }
      if (error.message.includes("quota")) {
        throw new Error("API quota exceeded. Please check your Gemini API plan and usage.");
      }
    }
    throw new Error(`An error occurred while generating pitch deck content: ${error instanceof Error ? error.message : String(error)}`);
  }
};


export const autogenerateBusinessIdea = async (): Promise<{ businessDetails: AutogeneratedBusinessIdea; logoImageUrl: string | null }> => {
  if (!process.env.API_KEY) {
    throw new Error("API Key for Gemini is not configured.");
  }

  try {
    // 1. Generate business details
    const businessDetailsResponse: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_NAME,
      contents: "Generate a startup idea as per the system instruction.", // Simple prompt, system instruction does the heavy lifting
      config: {
        systemInstruction: AUTOGENERATE_BUSINESS_SYSTEM_INSTRUCTION,
        responseMimeType: "application/json",
      },
    });

    let detailsJsonStr = businessDetailsResponse.text.trim();
    const fenceRegex = /^```(\w*)?\s*\n?(.*?)\n?\s*```$/s;
    let match = detailsJsonStr.match(fenceRegex);
    if (match && match[2]) {
      detailsJsonStr = match[2].trim();
    }
    
    const businessDetails: AutogeneratedBusinessIdea = JSON.parse(detailsJsonStr);

    // 2. Generate logo
    let logoImageUrl: string | null = null;
    const logoPrompt = `A modern, professional company logo for "${businessDetails.companyName}". Concept: "${businessDetails.logoConcept}". Minimalist, clean design suitable for a tech startup.`;
    
    try {
        const logoResponse = await ai.models.generateImages({
            model: IMAGEN_MODEL_NAME,
            prompt: logoPrompt,
            config: { numberOfImages: 1, outputMimeType: 'image/png' },
        });

        if (logoResponse.generatedImages && logoResponse.generatedImages.length > 0) {
            const base64ImageBytes: string = logoResponse.generatedImages[0].image.imageBytes;
            logoImageUrl = `data:image/png;base64,${base64ImageBytes}`;
        }
    } catch (logoError) {
        console.error("Failed to generate company logo:", logoError);
        // Proceed without a logo if generation fails
    }

    return { businessDetails, logoImageUrl };

  } catch (error) {
    console.error("Error in autogenerateBusinessIdea:", error);
    if (error instanceof Error && (error.message.includes("API key not valid") || error.message.includes("quota"))) {
        throw error; // Re-throw specific API errors
    }
    throw new Error(`Failed to autogenerate business idea: ${error instanceof Error ? error.message : String(error)}`);
  }
};

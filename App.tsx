// Copyright James Burvel O’Callaghan III
// President Citibank Demo Business Inc.


import React, { useState, useCallback } from 'react';
import { PitchDeckFormData, Slide, AppState, AutogeneratedBusinessIdea, FileInfo } from './types';
import { FormField } from './components/FormField';
import { FileUpload } from './components/FileUpload';
import { SlideCard } from './components/SlideCard';
import { LoadingSpinner } from './components/LoadingSpinner';
import { generatePitchDeckContent, autogenerateBusinessIdea } from './services/geminiService';
import { GEMINI_MODEL_NAME } from './constants';

const App: React.FC = () => {
  const [formData, setFormData] = useState<PitchDeckFormData>({
    companyName: '',
    tagline: '',
    problem: '',
    solution: '',
    targetMarket: '',
    businessModel: '',
    team: '',
    traction: '',
    financialProjections: '',
    callToAction: '',
    uploadedFiles: [],
  });
  const [generatedSlides, setGeneratedSlides] = useState<Slide[]>([]);
  const [appState, setAppState] = useState<AppState>(AppState.FORM);
  const [error, setError] = useState<string | null>(null);
  const [companyLogoUrl, setCompanyLogoUrl] = useState<string | null>(null);
  const [isAutogenerating, setIsAutogenerating] = useState<boolean>(false);

  const handleInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setFormData(prev => ({ ...prev, [name]: value }));
  }, []);

  const handleFileChange = useCallback((files: FileInfo[]) => {
    setFormData(prev => ({ ...prev, uploadedFiles: files }));
  }, []);

  const handleAutogenerate = async () => {
    setError(null);
    setIsAutogenerating(true);
    setCompanyLogoUrl(null);
    setGeneratedSlides([]);
    try {
      const { businessDetails, logoImageUrl } = await autogenerateBusinessIdea();
      setFormData(prev => ({
        ...prev,
        companyName: businessDetails.companyName,
        tagline: businessDetails.tagline,
        problem: businessDetails.problem,
        solution: businessDetails.solution,
        targetMarket: businessDetails.targetMarket,
        businessModel: businessDetails.businessModel,
        // Optionally clear other fields or set them to defaults
        team: '',
        traction: '',
        financialProjections: '',
        callToAction: '', // Or a default like "Seeking investment"
        uploadedFiles: [], // Clear uploaded files as they might not be relevant
      }));
      setCompanyLogoUrl(logoImageUrl);
      setAppState(AppState.FORM);
    } catch (err) {
      console.error("Error autogenerating business idea:", err);
      setError(err instanceof Error ? err.message : "Failed to autogenerate business idea. Check console.");
      setAppState(AppState.FORM); // Stay on form or go to error dedicated state if preferred
    } finally {
      setIsAutogenerating(false);
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!formData.companyName || !formData.problem || !formData.solution) {
        setError("Please fill in at least Company Name, Problem, and Solution fields.");
        return;
    }
    setError(null);
    setAppState(AppState.GENERATING);
    setGeneratedSlides([]);

    try {
      const slides = await generatePitchDeckContent(formData);
      setGeneratedSlides(slides);
      setAppState(AppState.RESULTS);
    } catch (err) {
      console.error("Error generating pitch deck:", err);
      setError(err instanceof Error ? err.message : "An unknown error occurred. Check console for details.");
      setAppState(AppState.ERROR);
    }
  };

  const restartForm = () => {
    setFormData({
      companyName: '',
      tagline: '',
      problem: '',
      solution: '',
      targetMarket: '',
      businessModel: '',
      team: '',
      traction: '',
      financialProjections: '',
      callToAction: '',
      uploadedFiles: [],
    });
    setGeneratedSlides([]);
    setError(null);
    setCompanyLogoUrl(null);
    setIsAutogenerating(false);
    setAppState(AppState.FORM);
  };
  
  const FormIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
      <path strokeLinecap="round" strokeLinejoin="round" d="M9 12h3.75M9 15h3.75M9 18h3.75m3 .75H18a2.25 2.25 0 0 0 2.25-2.25V6.108c0-1.135-.845-2.098-1.976-2.192a48.424 48.424 0 0 0-1.123-.08m-5.801 0c-.065.21-.1.433-.1.664 0 .414.336.75.75.75h4.5a.75.75 0 0 0 .75-.75 2.25 2.25 0 0 0-.1-.664m-5.8 0A2.251 2.251 0 0 1 5.25 6h.008a2.25 2.25 0 0 1 2.242 2.135M8.25 10.5h2.25M12 15H2.25M2.25 18h2.25m6-15C5.335 3.001 2.25 5.006 2.25 8.184v.066c0 .324.042.646.121.956M15.75 15a3.75 3.75 0 0 0-7.5 0" />
    </svg>
  );

  const RocketIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
      {/* Simplified Rocket Icon */}
      <path strokeLinecap="round" strokeLinejoin="round" d="M15.59 14.37a6 6 0 01-5.84 7.38v-4.82m5.84-2.56a6 6 0 01-7.38 5.84m0 0a6 6 0 01-5.84-7.38m5.84 7.38v-4.82m0 0H7.03m9.56 0H12.03m0 0H7.03m0 0c-1.105 0-2.071-.344-2.824-.952M12.03 4.5c.928 0 1.796.223 2.56.634m-.56-2.134A6 6 0 007.03 4.5m0 0a6 6 0 005 0m0 0V2.25m0 0c1.034 0 1.93.407 2.625 1.077m0 0c.344.344.606.726.794 1.135M12.03 4.5V2.25m0 0c-.928 0-1.796.223-2.56.634m.56-2.134A6 6 0 0112.03 2.25m0 0H9.405m0 0c-1.034 0-1.93.407-2.625 1.077m0 0c-.344.344-.606.726-.794 1.135" />
    </svg>
  );
   const SparklesIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-5 h-5 mr-2">
      <path strokeLinecap="round" strokeLinejoin="round" d="M9.813 15.904L9 18.75l-.813-2.846a4.5 4.5 0 00-3.09-3.09L2.25 12l2.846-.813a4.5 4.5 0 003.09-3.09L9 5.25l.813 2.846a4.5 4.5 0 003.09 3.09L15.75 12l-2.846.813a4.5 4.5 0 00-3.09 3.09zM18.259 8.715L18 9.75l-.259-1.035a3.375 3.375 0 00-2.455-2.456L14.25 6l1.036-.259a3.375 3.375 0 002.455-2.456L18 2.25l.259 1.035a3.375 3.375 0 002.456 2.456L21.75 6l-1.035.259a3.375 3.375 0 00-2.456 2.456zM16.898 20.624L16.5 21.75l-.398-1.126a3.375 3.375 0 00-2.456-2.456L12.525 18l1.126-.398a3.375 3.375 0 002.456-2.456L16.5 14.25l.398 1.126a3.375 3.375 0 002.456 2.456L20.475 18l-1.126.398a3.375 3.375 0 00-2.456 2.456z" />
    </svg>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-900 via-slate-800 to-indigo-900 text-slate-100 p-4 sm:p-8 flex flex-col items-center selection:bg-indigo-500 selection:text-white">
      <header className="w-full max-w-4xl mb-8 text-center">
        <h1 className="text-4xl sm:text-5xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 via-pink-500 to-red-500">
          AI Pitch Deck Assistant
        </h1>
        <p className="mt-3 text-lg text-slate-300">
          Craft compelling pitch deck content & images with Gemini AI ({GEMINI_MODEL_NAME} & Imagen).
        </p>
      </header>

      <main className="w-full max-w-4xl p-6 sm:p-8 bg-slate-800 bg-opacity-70 backdrop-blur-md shadow-2xl rounded-xl">
        {appState === AppState.FORM && (
          <>
            <div className="mb-6 flex flex-col sm:flex-row justify-between items-center gap-4">
              <h2 className="text-2xl font-semibold text-indigo-300">
                1. Provide Your Venture Details
              </h2>
              <button
                type="button"
                onClick={handleAutogenerate}
                disabled={isAutogenerating}
                className="flex items-center justify-center bg-gradient-to-r from-teal-500 to-cyan-600 hover:from-teal-600 hover:to-cyan-700 text-white font-semibold py-2 px-6 rounded-lg shadow-md hover:shadow-lg transform hover:scale-105 transition-all duration-300 ease-in-out disabled:opacity-50 disabled:cursor-not-allowed"
              >
                {isAutogenerating ? <LoadingSpinner/> : <SparklesIcon />}
                {isAutogenerating ? 'Autogenerating Idea...' : '✨ Autogenerate Business Idea'}
              </button>
            </div>
             {error && (appState === AppState.FORM) && (
              <div className="mb-6 p-4 bg-red-500 bg-opacity-20 border border-red-700 text-red-300 rounded-lg">
                <h3 className="font-bold text-red-200">Notice</h3>
                <p className="text-sm">{error}</p>
              </div>
            )}
            {companyLogoUrl && (
              <div className="mb-6 p-4 bg-slate-700 rounded-lg flex flex-col items-center">
                <h3 className="text-lg font-semibold text-indigo-300 mb-2">Generated Company Logo:</h3>
                <img src={companyLogoUrl} alt="Generated company logo" className="max-w-xs h-auto max-h-32 rounded-md shadow-lg" />
              </div>
            )}
            <form onSubmit={handleSubmit} className="space-y-8">
              <div>
                <h3 className="text-xl font-semibold text-indigo-400 mb-4 border-b-2 border-indigo-500 pb-2">Company Essentials</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <FormField label="Company Name" name="companyName" value={formData.companyName} onChange={handleInputChange} placeholder="e.g., Innovatech Solutions" required />
                  <FormField label="Tagline / Elevator Pitch" name="tagline" value={formData.tagline} onChange={handleInputChange} placeholder="e.g., Revolutionizing X with Y" />
                </div>
              </div>

              <div>
                <h3 className="text-xl font-semibold text-indigo-400 mb-4 border-b-2 border-indigo-500 pb-2">Problem & Solution</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <FormField label="Problem Statement" name="problem" type="textarea" value={formData.problem} onChange={handleInputChange} placeholder="Describe the core problem you're solving." required />
                  <FormField label="Your Solution" name="solution" type="textarea" value={formData.solution} onChange={handleInputChange} placeholder="Explain how your product/service solves this problem." required />
                </div>
              </div>
              
              <div>
                <h3 className="text-xl font-semibold text-indigo-400 mb-4 border-b-2 border-indigo-500 pb-2">Market & Business</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <FormField label="Target Market" name="targetMarket" type="textarea" value={formData.targetMarket} onChange={handleInputChange} placeholder="Who are your customers? Market size?" />
                  <FormField label="Business Model" name="businessModel" type="textarea" value={formData.businessModel} onChange={handleInputChange} placeholder="How do you make money?" />
                </div>
              </div>

              <div>
                <h3 className="text-xl font-semibold text-indigo-400 mb-4 border-b-2 border-indigo-500 pb-2">Details & Context (Optional)</h3>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <FormField label="Team Overview" name="team" type="textarea" value={formData.team} onChange={handleInputChange} placeholder="Key team members and expertise (optional)." />
                  <FormField label="Traction / Milestones" name="traction" type="textarea" value={formData.traction} onChange={handleInputChange} placeholder="Key achievements, user numbers, etc. (optional)." />
                  <FormField label="Financial Projections/Highlights" name="financialProjections" type="textarea" value={formData.financialProjections} onChange={handleInputChange} placeholder="Brief summary of financial goals or current status (optional)." />
                  <FormField label="Call To Action" name="callToAction" value={formData.callToAction} onChange={handleInputChange} placeholder="e.g., Seeking $500k seed funding." />
                </div>
              </div>
              
              <div>
                <h3 className="text-xl font-semibold text-indigo-400 mb-4 border-b-2 border-indigo-500 pb-2">Supporting Documents (Optional)</h3>
                <FileUpload onFileChange={handleFileChange} />
                <p className="mt-2 text-sm text-slate-400">Upload relevant documents (TXT, JSON, MD, PDF-text). Content will be used to enrich AI generation.</p>
              </div>

              <div className="pt-4 flex justify-end">
                <button
                  type="submit"
                  className="flex items-center justify-center bg-gradient-to-r from-purple-600 to-indigo-600 hover:from-purple-700 hover:to-indigo-700 text-white font-semibold py-3 px-8 rounded-lg shadow-md hover:shadow-lg transform hover:scale-105 transition-all duration-300 ease-in-out"
                >
                  <RocketIcon />
                  Generate Pitch Deck Content & Images
                </button>
              </div>
            </form>
          </>
        )}

        {appState === AppState.GENERATING && (
          <div className="text-center py-20">
            <LoadingSpinner />
            <p className="mt-4 text-xl text-slate-300">Generating slides and images... this may take a while.</p>
          </div>
        )}

        {error && appState === AppState.ERROR && (
          <div className="my-6 p-4 bg-red-500 bg-opacity-20 border border-red-700 text-red-300 rounded-lg">
            <h3 className="font-bold text-red-200">Generation Failed</h3>
            <p className="text-sm">{error}</p>
            <p className="text-sm mt-1">Please ensure your API key is correctly configured and try again. If the problem persists, check the console.</p>
             <button
                onClick={restartForm}
                className="mt-4 bg-red-600 hover:bg-red-700 text-white font-semibold py-2 px-4 rounded-md text-sm transition-colors"
              >
                Try Again
              </button>
          </div>
        )}

        {appState === AppState.RESULTS && generatedSlides.length > 0 && (
          <div>
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-3xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-green-400 via-cyan-500 to-blue-500">Generated Pitch Deck Content</h2>
              <button
                onClick={restartForm}
                className="flex items-center bg-slate-700 hover:bg-slate-600 text-slate-200 font-semibold py-2 px-6 rounded-lg shadow-md hover:shadow-lg transition-all duration-300 ease-in-out"
              >
                <FormIcon />
                Start Over
              </button>
            </div>
            <div className="space-y-6">
              {generatedSlides.map((slide, index) => (
                <SlideCard key={index} slide={slide} index={index} />
              ))}
            </div>
             <p className="mt-8 text-sm text-slate-400 text-center">
                Copy the content for each slide and use it in your preferred presentation software (e.g., Google Slides, PowerPoint). Images are included!
             </p>
          </div>
        )}
      </main>
      <footer className="w-full max-w-4xl mt-12 text-center text-slate-500 text-sm">
        <p>Ensure your <code className="bg-slate-700 px-1 py-0.5 rounded text-xs font-mono text-slate-300">process.env.API_KEY</code> is correctly configured for Gemini API access.</p>
        <p>&copy; {new Date().getFullYear()} AI Pitch Deck Assistant. Powered by Google Gemini.</p>
      </footer>
    </div>
  );
};

export default App;
